{
  "version": 3,
  "sources": ["../../../@strapi/plugin-color-picker/admin/src/components/ColorPickerIcon.tsx", "../../../@strapi/plugin-color-picker/admin/src/pluginId.ts", "../../../@strapi/plugin-color-picker/admin/src/utils/getTrad.ts", "../../../@strapi/plugin-color-picker/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/plugin-color-picker/admin/src/index.ts"],
  "sourcesContent": ["import { Flex } from '@strapi/design-system';\nimport { PaintBrush } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nconst IconBox = styled(Flex)`\n  /* Hard code color values */\n  /* to stay consistent between themes */\n  background-color: #f0f0ff; /* primary100 */\n  border: 1px solid #d9d8ff; /* primary200 */\n\n  svg > path {\n    fill: #4945ff; /* primary600 */\n  }\n`;\n\nexport const ColorPickerIcon = () => {\n  return (\n    <IconBox justifyContent=\"center\" alignItems=\"center\" width={7} height={6} hasRadius aria-hidden>\n      <PaintBrush />\n    </IconBox>\n  );\n};\n", "export const pluginId = 'color-picker';\n", "import { pluginId } from '../pluginId';\n\nexport const getTrad = (id: string) => `${pluginId}.${id}`;\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { ColorPickerIcon } from './components/ColorPickerIcon';\nimport { pluginId } from './pluginId';\nimport { getTrad } from './utils/getTrad';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  /**\n   * TODO: we need to have the type for StrapiApp done from `@strapi/admin` package.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: any) {\n    app.customFields.register({\n      name: 'color',\n      pluginId: 'color-picker',\n      type: 'string',\n      icon: ColorPickerIcon,\n      intlLabel: {\n        id: getTrad('color-picker.label'),\n        defaultMessage: 'Color',\n      },\n      intlDescription: {\n        id: getTrad('color-picker.description'),\n        defaultMessage: 'Select any color',\n      },\n      components: {\n        Input: async () =>\n          import('./components/ColorPickerInput').then((module) => ({\n            default: module.ColorPickerInput,\n          })),\n      },\n      options: {\n        advanced: [\n          {\n            intlLabel: {\n              id: getTrad('color-picker.options.advanced.regex'),\n              defaultMessage: 'RegExp pattern',\n            },\n            name: 'regex',\n            type: 'text',\n            defaultValue: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$',\n            description: {\n              id: getTrad('color-picker.options.advanced.regex.description'),\n              defaultMessage: 'The text of the regular expression',\n            },\n          },\n          {\n            sectionTitle: {\n              id: 'global.settings',\n              defaultMessage: 'Settings',\n            },\n            items: [\n              {\n                name: 'required',\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTrad('color-picker.options.advanced.requiredField'),\n                  defaultMessage: 'Required field',\n                },\n                description: {\n                  id: getTrad('color-picker.options.advanced.requiredField.description'),\n                  defaultMessage: \"You won't be able to create an entry if this field is empty\",\n                },\n              },\n            ],\n          },\n        ],\n      },\n    });\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,UAAU,GAAO,IAAI;;;;;;;;;;AAWpB,IAAM,kBAAkB,MAAM;AACnC,aAAA,wBACG,SAAQ,EAAA,gBAAe,UAAS,YAAW,UAAS,OAAO,GAAG,QAAQ,GAAG,WAAS,MAAC,eAAW,MAC7F,cAAA,wBAAC,eAAA,CAAA,CAAW,EACd,CAAA;AAEJ;ACrBO,IAAM,WAAW;ACEjB,IAAM,UAAU,CAAC,OAAe,GAAG,QAAQ,IAAI,EAAE;ACAxD,IAAM,2BAA2B,CAAC,MAAmBA,cAAkC;AAIrF,SAAO,OAAO,KAAK,IAAI,EAAE,OAAO,CAAC,KAAK,YAAY;AAChD,QAAI,GAAGA,SAAQ,IAAI,OAAO,EAAE,IAAI,KAAK,OAAO;AACrC,WAAA;EACT,GAAG,CAAiB,CAAA;AACtB;ACJA,IAAe,QAAA;;;;;EAKb,SAAS,KAAU;AACjB,QAAI,aAAa,SAAS;MACxB,MAAM;MACN,UAAU;MACV,MAAM;MACN,MAAM;MACN,WAAW;QACT,IAAI,QAAQ,oBAAoB;QAChC,gBAAgB;MAClB;MACA,iBAAiB;QACf,IAAI,QAAQ,0BAA0B;QACtC,gBAAgB;MAClB;MACA,YAAY;QACV,OAAO,YACL,OAAO,yCAA+B,EAAE,KAAK,CAAC,YAAY;UACxD,SAAS,OAAO;QAAA,EAChB;MACN;MACA,SAAS;QACP,UAAU;UACR;YACE,WAAW;cACT,IAAI,QAAQ,qCAAqC;cACjD,gBAAgB;YAClB;YACA,MAAM;YACN,MAAM;YACN,cAAc;YACd,aAAa;cACX,IAAI,QAAQ,iDAAiD;cAC7D,gBAAgB;YAClB;UACF;UACA;YACE,cAAc;cACZ,IAAI;cACJ,gBAAgB;YAClB;YACA,OAAO;cACL;gBACE,MAAM;gBACN,MAAM;gBACN,WAAW;kBACT,IAAI,QAAQ,6CAA6C;kBACzD,gBAAgB;gBAClB;gBACA,aAAa;kBACX,IAAI,QAAQ,yDAAyD;kBACrE,gBAAgB;gBAClB;cACF;YACF;UACF;QACF;MACF;IAAA,CACD;EACH;EACA,MAAM,cAAc,EAAE,QAAA,GAAkC;AAChD,UAAA,gBAAgB,MAAM,QAAQ;MAClC,QAAQ,IAAI,CAAC,WAAW;AACf,eAAA,qCAA+B,OAAA,OAAA,EAAA,0BAAA,MAAA,OAAA,2BAAA,GAAA,0BAAA,MAAA,OAAA,2BAAA,GAAA,0BAAA,MAAA,OAAA,2BAAA,GAAA,0BAAA,MAAA,OAAA,2BAAA,GAAA,0BAAA,MAAA,OAAA,2BAAA,GAAA,0BAAA,MAAA,OAAA,2BAAA,EAAA,CAAA,GAAA,kBAAA,MAAA,OAAA,EACnC,KAAK,CAAC,EAAE,SAAS,KAAA,MAAW;AACpB,iBAAA;YACL,MAAM,yBAAyB,MAAM,QAAQ;YAC7C;UAAA;QACF,CACD,EACA,MAAM,MAAM;AACJ,iBAAA;YACL,MAAM,CAAC;YACP;UAAA;QACF,CACD;MAAA,CACJ;IAAA;AAGI,WAAA,QAAQ,QAAQ,aAAa;EACtC;AACF;",
  "names": ["pluginId"]
}
